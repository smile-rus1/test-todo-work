from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup

from keyboards import main_keyboard, create_task_inline_keyboard, inline_keyboard_to_task, inline_keyboard_to_message, \
    inline_keyboard_user_categories
from api import register_user, get_categories, create_categories, create_tasks, get_user_tasks, get_user_task_by_id, \
    delete_user_task, create_comment_to_task, show_all_comments_to_task_by_id, delete_message_by_id, edit_message_by_id, \
    edit_task_by_id, show_user_categories, show_detail_user_category, delete_user_category, edit_category_
from states import AddTaskSG, AddCommentsToTask, EditMessage, EditTask, EditCategory

router = Router()


@router.message(Command("start"))
async def start_command(message: types.Message):
    data_user = {
        "username": message.from_user.username,
        "password": f"{message.from_user.username}{message.from_user.id}",
        "first_name": message.from_user.first_name or None,
        "last_name": message.from_user.last_name or None,
        "telegram_id": message.from_user.id
    }

    if await register_user(data_user) == 200:
        await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n–î–∞–≤–∞–π—Ç–µ –∏—Å–ø—Ä–∞–≤–∏–º —ç—Ç–æ... ‚è≥")

        await message.answer(
            "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∑–∞–¥–∞—á–∞–º–∏.",
            reply_markup=main_keyboard
        )
        return
    await message.answer(
        f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {message.from_user.first_name}!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=main_keyboard
    )


@router.message(Command("add_task"))
@router.message(lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
async def add_task_start(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
    await state.set_state(AddTaskSG.title)


@router.message(AddTaskSG.title)
async def add_task_title(message: types.Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
    await state.set_state(AddTaskSG.description)


@router.message(AddTaskSG.description)
async def add_task_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)

    categories = await get_categories(
        {
            "username": message.from_user.username,
            "password": f"{message.from_user.username}{message.from_user.id}",
        }
    )

    buttons = [KeyboardButton(text=cat["name"]) for cat in categories]
    buttons.append(KeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é"))

    keyboard = ReplyKeyboardMarkup(keyboard=[buttons], resize_keyboard=True)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é:", reply_markup=keyboard)
    await state.set_state(AddTaskSG.categories)


@router.message(AddTaskSG.categories)
async def add_task_category(message: types.Message, state: FSMContext):
    user_data = {
        "username": message.from_user.username,
        "password": f"{message.from_user.username}{message.from_user.id}",
    }
    categories = await get_categories(user_data)
    category_names = [cat["name"] for cat in categories]

    if message.text == "‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
        await state.set_state(AddTaskSG.new_category)
        return

    if message.text not in category_names:
        await message.answer("‚ùå –¢–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é.")
        return

    category_id = next(cat["id"] for cat in categories if cat["name"] == message.text)

    await finish_task_creation(message, state, category_id)


@router.message(AddTaskSG.new_category)
async def create_new_category(message: types.Message, state: FSMContext):
    user_data = {
        "username": message.from_user.username,
        "password": f"{message.from_user.username}{message.from_user.id}",
    }

    category = await create_categories(user_data, message.text)

    if isinstance(category, dict) and "id" in category:
        category_id = category["id"]
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    await message.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{message.text}' —Å–æ–∑–¥–∞–Ω–∞ –∏ –≤—ã–±—Ä–∞–Ω–∞!")

    await finish_task_creation(message, state, category_id)


async def finish_task_creation(message: types.Message, state: FSMContext, category_id: str):
    task_data = await state.get_data()
    user_data = {
        "username": message.from_user.username,
        "password": f"{message.from_user.username}{message.from_user.id}",
    }

    task_data_save = {
        "title": task_data["title"],
        "description": task_data["description"],
        "category_ids": [category_id],
    }
    result = await create_tasks(user_data, task_data_save)

    if result is None:
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
            reply_markup=main_keyboard
        )

    await message.answer(
        f"‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n"
        f"–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏: {result.get("title")}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: {result.get("description")}\n"
        f"–ö–æ–≥–¥–∞ —Å–æ–∑–¥–∞–Ω–∞: {result.get("created_at")}",
        reply_markup=main_keyboard)
    await state.clear()


@router.message(Command("tasks"))
@router.message(lambda message: message.text == "üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏")
async def show_my_tasks(message: types.Message):
    user_data = {
        "username": message.from_user.username,
        "password": f"{message.from_user.username}{message.from_user.id}",
    }
    user_tasks = await get_user_tasks(user_data)
    if not user_tasks:
        await message.answer("üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ ‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É.")
        return

    keyboard = create_task_inline_keyboard(user_tasks)

    await message.answer("üóÇ –í–∞—à–∏ –∑–∞–¥–∞—á–∏:", reply_markup=keyboard)


@router.callback_query(lambda c: c.data.startswith("task_"))
async def task_details(callback: types.CallbackQuery):
    user_data = {
        "username": callback.from_user.username,
        "password": f"{callback.from_user.username}{callback.from_user.id}",
    }
    task_id = callback.data.split("_")[1]
    task = await get_user_task_by_id(user_data, task_id)

    if not task:
        await callback.answer("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
        return

    text = (
        f"üìå{task.get('title')}\n\n"
        f"üìù {task.get('description')}\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {[category.get('name') for category in task.get('categories')][0]}\n"
        f"üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {task.get('created_at')[:10]}\n"
    )

    keyboard = inline_keyboard_to_task(task.get("id"))

    await callback.message.answer(text, reply_markup=keyboard)


@router.callback_query(lambda c: c.data.startswith("delete_"))
async def delete_task(callback: types.CallbackQuery):
    user_data = {
        "username": callback.from_user.username,
        "password": f"{callback.from_user.username}{callback.from_user.id}",
    }
    task_id = callback.data.split("_")[1]
    await delete_user_task(user_data, task_id)
    await callback.message.delete()

    user_tasks = await get_user_tasks(user_data)
    keyboard = create_task_inline_keyboard(user_tasks)

    await callback.message.answer(
        f"–ó–∞–¥–∞—á–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞\n"
        f"–û—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–¥–∞—á–∏:\n",
        reply_markup=keyboard
    )


@router.callback_query(lambda c: c.data.startswith("comment_"))
async def add_to_task_comment(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")

    task_id = callback.data.split("_")[1]

    await state.update_data(task_id=task_id)
    await state.set_state(AddCommentsToTask.content)


@router.message(AddCommentsToTask.content)
async def comment_to_task(message: types.Message, state: FSMContext):
    await state.update_data(content=message.text)

    data = await state.get_data()
    user_data = {
        "username": message.from_user.username,
        "password": f"{message.from_user.username}{message.from_user.id}",
    }
    comment_data = {
        "task_id": data.get("task_id"),
        "content": data.get("content")
    }
    comment_id = await create_comment_to_task(user_data, comment_data)
    if comment_id is None:
        await message.answer(
            f"‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑\n",
            reply_markup=main_keyboard)
        await state.clear()
        return

    await message.answer(
        f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω!\n",
        reply_markup=main_keyboard)
    await state.clear()


@router.callback_query(lambda c: c.data.startswith("show-comment_"))
async def show_all_comments_to_task(callback: types.CallbackQuery):
    await callback.message.delete()

    task_id = callback.data.split("_")[1]
    comments = await show_all_comments_to_task_by_id(task_id)
    if not comments:
        await callback.message.answer(
            "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –µ—â–µ –Ω–µ—Ç!",
            reply_markup=main_keyboard
        )
        return

    keyboard = inline_keyboard_to_message(comments)

    await callback.message.answer(
        "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:",
        reply_markup=keyboard
    )


@router.callback_query(lambda c: c.data.startswith("message_"))
async def show_detail_message(callback: types.CallbackQuery):
    message_id = callback.data.split("_")[1]

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit-message_{message_id}")],
            [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete-message_{message_id}")],
        ]
    )

    await callback.message.answer(
        text="–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:",
        reply_markup=keyboard
    )


@router.callback_query(lambda c: c.data.startswith("delete-message_"))
async def delete_message(callback: types.CallbackQuery):
    message_id = callback.data.split("_")[1]
    await delete_message_by_id(int(message_id))

    await callback.message.answer(
        text="–°–æ–æ–±—â–µ–Ω–∏–µ –∫ –∑–∞–¥–∞—á–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ",
        reply_markup=main_keyboard
    )


@router.callback_query(lambda c: c.data.startswith("edit-message_"))
async def edit_message(callback: types.CallbackQuery, state: FSMContext):
    message_id = callback.data.split("_")[1]
    await state.update_data(message_id=message_id)
    await callback.message.delete()
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
    await state.set_state(EditMessage.new_message)


@router.message(EditMessage.new_message)
async def edit_comment_to_task(message: types.Message, state: FSMContext):
    await state.update_data(new_message=message.text)
    data = await state.get_data()

    new_message = await edit_message_by_id(
        message_id=int(data.get("message_id")),
        comment=data.get("new_message")
    )
    if new_message is None:
        await message.answer(
            text=f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!",
            reply_markup=main_keyboard
        )
        await state.clear()
        return

    await message.answer(
        text=f"–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞:"
             f"{new_message}",
        reply_markup=main_keyboard
    )
    await state.clear()


@router.callback_query(lambda c: c.data.startswith("edit-task_"))
async def edit_task(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ:")
    task_id = callback.data.split("_")[1]

    await state.update_data(task_id=task_id)
    await state.set_state(EditTask.title)


@router.message(EditTask.title)
async def add_task_new_title(message: types.Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ:")
    await state.set_state(EditTask.description)


@router.message(EditTask.description)
async def add_task_new_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)

    categories = await get_categories(
        {
            "username": message.from_user.username,
            "password": f"{message.from_user.username}{message.from_user.id}",
        }
    )

    buttons = [KeyboardButton(text=cat["name"]) for cat in categories]

    keyboard = ReplyKeyboardMarkup(keyboard=[buttons], resize_keyboard=True)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=keyboard)
    await state.set_state(EditTask.categories)


@router.message(EditTask.categories)
async def add_task_new_categories(message: types.Message, state: FSMContext):
    user_data = {
        "username": message.from_user.username,
        "password": f"{message.from_user.username}{message.from_user.id}",
    }

    categories = await get_categories(user_data)
    category_id = next(cat["id"] for cat in categories if cat["name"] == message.text)
    category_names = [cat["name"] for cat in categories]

    if message.text not in category_names:
        await message.answer("‚ùå –¢–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é.")
        return

    await finish_edit_task(message, state, category_id)


async def finish_edit_task(message: types.Message, state: FSMContext, category_id: str):
    task_data = await state.get_data()
    user_data = {
        "username": message.from_user.username,
        "password": f"{message.from_user.username}{message.from_user.id}",
    }

    task_data_save = {
        "title": task_data["title"],
        "description": task_data["description"],
        "category_ids": [category_id],
    }
    result = await edit_task_by_id(user_data, task_data.get("task_id"), task_data_save)

    if result is None:
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
            reply_markup=main_keyboard
        )

    await message.answer(
        f"‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n"
        f"–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏: {result.get("title")}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: {result.get("description")}\n"
        f"–ö–æ–≥–¥–∞ —Å–æ–∑–¥–∞–Ω–∞: {result.get("created_at")}",
        reply_markup=main_keyboard)
    await state.clear()


@router.message(Command("show_categories"))
@router.message(lambda message: message.text == "üìù –ú–æ–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
async def show_my_categories(message: types.Message):
    user_data = {
        "username": message.from_user.username,
        "password": f"{message.from_user.username}{message.from_user.id}",
    }
    categories = await show_user_categories(user_data)

    if categories is None:
        await message.answer(
            "–£ –≤–∞—Å –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π!",
            reply_markup=main_keyboard
        )
        return

    keyboard = inline_keyboard_user_categories(categories)

    await message.answer(
        "–í–∞—à–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
        reply_markup=keyboard
    )


@router.callback_query(lambda c: c.data.startswith("category_"))
async def show_details_category(callback: types.CallbackQuery):
    await callback.message.delete()
    category_id = callback.data.split("_")[1]

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit-category_{category_id}")],
            [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete-category_{category_id}")],
        ]
    )

    await callback.message.answer(
        text="–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:",
        reply_markup=keyboard
    )


@router.callback_query(lambda c: c.data.startswith("edit-category"))
async def edit_category(callback: types.CallbackQuery, state: FSMContext):
    category_id = callback.data.split("_")[1]
    await state.update_data(category_id=category_id)
    await callback.message.delete()
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    await state.set_state(EditCategory.name)


@router.message(EditCategory.name)
async def edit_user_category(message: types.Message, state: FSMContext):
    user_data = {
        "username": message.from_user.username,
        "password": f"{message.from_user.username}{message.from_user.id}",
    }

    await state.update_data(name=message.text)
    data = await state.get_data()

    new_category = await edit_category_(user_data, data.get("category_id"), data.get("name"))
    if new_category is None:
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
            reply_markup=main_keyboard
        )

    await message.answer(
        f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n"
        f"–ù–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫: {new_category.get("name")}",
        reply_markup=main_keyboard)
    await state.clear()


@router.callback_query(lambda c: c.data.startswith("delete-category"))
async def delete_category(callback: types.CallbackQuery):
    await callback.message.delete()
    user_data = {
        "username": callback.from_user.username,
        "password": f"{callback.from_user.username}{callback.from_user.id}",
    }
    category_id = callback.data.split("_")[1]

    await delete_user_category(user_data, category_id)

    await callback.message.answer(
        text="–ö–∞—Ç–µ–≥–æ—Ä–∏—è –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞",
        reply_markup=main_keyboard
    )

